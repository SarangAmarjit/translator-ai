// Supporting Constants and Enums

import 'package:ai_assistant/model/meeteimayek/mapper.dart';
import 'package:ai_assistant/model/meeteimayek/phonememodel.dart';

List<Phoneme> meiteiMayekPhonemes = [
  Phoneme(
    "a",
    isVowel: true,
    asVowel: "\uABE5",
    asConsonant: "ꯑ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "aa",
    isVowel: true,
    asVowel: "\uABE5",
    asConsonant: "ꯑ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "b",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯕ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "bh",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯚ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "c",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯆ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "ch",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯆ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "d",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯗ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "dh",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯙ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "e",
    isVowel: true,
    asVowel: "\uABE6",
    asConsonant: "ꯑ\uABE6",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "ee",
    isVowel: true,
    asVowel: "\uABE4",
    asConsonant: "ꯏ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "ei",
    isVowel: true,
    asVowel: "\uABE9",
    asConsonant: "ꯑ\uABE9",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "f",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯐ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "g",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯒ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "gh",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯘ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "h",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯍ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "i",
    isVowel: true,
    asVowel: "\uABE4",
    asConsonant: "ꯏ",
    canBeLonsum: true,
    asLonsum: "ꯢ",
  ),
  Phoneme(
    "j",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯖ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "jh",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯓ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "k",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯀ",
    canBeLonsum: true,
    asLonsum: "ꯛ",
  ),
  Phoneme(
    "kh",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯈ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "l",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯂ",
    canBeLonsum: true,
    asLonsum: "ꯜ",
  ),
  Phoneme(
    "m",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯃ",
    canBeLonsum: true,
    asLonsum: "ꯝ",
  ),
  Phoneme(
    "n",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯅ",
    canBeLonsum: true,
    asLonsum: "ꯟ",
  ),
  Phoneme(
    "ng",
    isVowel: false,
    asVowel: "\uABEA",
    asConsonant: "ꯉ",
    canBeLonsum: true,
    asLonsum: "ꯡ",
  ),
  Phoneme(
    "o",
    isVowel: true,
    asVowel: "\uABE3",
    asConsonant: "ꯑ\uABE3",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "oo",
    isVowel: true,
    asVowel: "\uABE8",
    asConsonant: "ꯎ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "ou",
    isVowel: true,
    asVowel: "\uABE7",
    asConsonant: "ꯑ\uABE7",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "p",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯄ",
    canBeLonsum: true,
    asLonsum: "ꯞ",
  ),
  Phoneme(
    "ph",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯐ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "r",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯔ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "s",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯁ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "t",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯇ",
    canBeLonsum: true,
    asLonsum: "ꯠ",
  ),
  Phoneme(
    "th",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯊ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "u",
    isVowel: true,
    asVowel: "\uABE8",
    asConsonant: "ꯎ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "v",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯚ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "w",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯋ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "y",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯌ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  Phoneme(
    "z",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯖ",
    canBeLonsum: false,
    asLonsum: "",
  ),
  // Phoneme for 'cheikhei' (full-stop)
  Phoneme(
    ".",
    isVowel: false,
    asVowel: "",
    asConsonant: "\uABEB", // Unicode for cheikhei/full-stop
    canBeLonsum: false,
    asLonsum: "",
  ),

  // Phoneme for 'Q' (kok + apun_mayek + wai, kw sound)
  Phoneme(
    "q",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯀ\uABEDꯋ", // kok + apun_mayek + wai
    canBeLonsum: false,
    asLonsum: "",
  ),

  // Phoneme for 'X' (kok + apun_mayek + sam, ks sound)
  Phoneme(
    "x",
    isVowel: false,
    asVowel: "",
    asConsonant: "ꯀ\uABEDꯁ", // kok + apun_mayek + sam
    canBeLonsum: false,
    asLonsum: "",
  ),
];

// Replace with actual data.
const Map<String, String> MEITEI_MAYEK_NUMBERS = {
  '꯰': '0',
  '꯱': '1',
  '꯲': '2',
  '꯳': '3',
  '꯴': '4',
  '꯵': '5',
  '꯶': '6',
  '꯷': '7',
  '꯸': '8',
  '꯹': '9'
};
const List<List<String>> MEITEI_MAYEK_APUN_MAYEK_RULES = [
  // the following combinations of phonemes are combined with an APUN MAYEK
  ["b", "r"],
  // ["ch", "r"], can't think of example
  ["dh", "r"],
  ["dh", "y"],
  ["f", "r"],
  ["g", "r"],
  ["g", "y"],
  ["j", "r"],
  ["j", "y"],
  // ["k", "r"], violated in "kari" (what)
  ["k", "w"],
  ["k", "y"],
  ["kh", "r"],
  ["kh", "w"],
  ["n", "y"],
  // ["ng", "r"], can't think of example
  ["p", "r"],
  ["p", "y"],
  ["ph", "r"],
  ["s", "w"],
  ["s", "y"],
  ["sh", "w"],
  ["sh", "y"],
  ["t", "r"],
  ["th", "r"],
  // ["th", "w"], violated in "thwai"
  ["v", "y"],
];
var MAPPER = Mapper();
final PHI = Phoneme('');
final APUN_MAYEK_AS_PHONEME = Phoneme('\uABED', asConsonant: '\uABED');

enum CVCState { NONE, CONSONANT, VOWEL }

enum OutputMode { VOWEL, CONSONANT, LONSUM }

final Map<String, String> meeteiToEnglish = {
  "ꯑ": "a",
  "ꯥ": "a",
  "ꯕ": "b",
  "ꯚ": "v",
  "ꯆ": "ch",
  "ꯗ": "d",
  "ꯙ": "dh",
  "ꯑꯦ": "e",
  "ꯦ": "e",
  "ꯏ": "i",
  "ꯤ": "i",
  "ꯑꯩ": "ei",
  "ꯩ": "ei",
  "ꯐ": "ph",
  "ꯒ": "gh",
  "ꯘ": "gh",
  "ꯍ": "h",
  "ꯢ": "i",
  "ꯖ": "z",
  "ꯓ": "jh",
  "ꯀ": "ka",
  "ꯛ": "k",
  "ꯈ": "kh",
  "ꯂ": "l",
  "ꯜ": "l",
  "ꯃ": "m",
  "ꯝ": "m",
  "ꯅ": "n",
  "ꯟ": "n",
  "ꯉ": "ng",
  "ꯪ": "ng",
  "ꯡ": "ng",
  "ꯑꯣ": "o",
  "ꯣ": "o",
  "ꯎ": "u",
  "ꯨ": "u",
  "ꯑꯧ": "ou",
  "ꯧ": "ou",
  "ꯄ": "p",
  "ꯞ": "p",
  "ꯔ": "r",
  "ꯁ": "s",
  "ꯇ": "t",
  "ꯠ": "t",
  "ꯊ": "th",
  "ꯋ": "w",
  "ꯌ": "y",
  "꯫": ".",
  "ꯀ꯭ꯋ": "q",
  "ꯀ꯭ꯁ": "x",
};

final Map<String, String Function(bool)> meeteiToEnglishok = {
  ".": (isfirstletter) => isfirstletter ? "." : ".",
  "ꯑ": (isfirstletter) => "a",
  "ꯥ": (isfirstletter) => "a",
  "ꯕ": (isfirstletter) => isfirstletter ? "ba" : "b",
  "ꯚ": (isfirstletter) => isfirstletter ? "va" : "v",
  "ꯆ": (isfirstletter) => isfirstletter ? "ch" : "c",
  "ꯗ": (isfirstletter) => isfirstletter ? "da" : "d",
  "ꯙ": (isfirstletter) => "dh",
  "ꯑꯦ": (isfirstletter) => "e",
  "ꯦ": (isfirstletter) => "e",
  "ꯏ": (isfirstletter) => isfirstletter ? "i" : "i",
  "ꯤ": (isfirstletter) => "i",
  "ꯑꯩ": (isfirstletter) => "ei",
  "ꯩ": (isfirstletter) => "ei",
  "ꯐ": (isfirstletter) => "ph",
  "ꯒ": (isfirstletter) => "gh",
  "ꯘ": (isfirstletter) => "gh",
  "ꯍ": (isfirstletter) => isfirstletter ? "ha" : "h",
  "ꯢ": (isfirstletter) => "i",
  "ꯖ": (isfirstletter) => isfirstletter ? "za" : "z",
  "ꯓ": (isfirstletter) => "jh",
  "ꯀ": (isfirstletter) => isfirstletter ? "ka" : "k",
  "ꯛ": (isfirstletter) => "k",
  "ꯈ": (isfirstletter) => "kh",
  "ꯂ": (isfirstletter) => isfirstletter ? "la" : "l",
  "ꯜ": (isfirstletter) => "l",
  "ꯃ": (isfirstletter) => isfirstletter ? "ma" : "m",
  "ꯝ": (isfirstletter) => "m",
  "ꯅ": (isfirstletter) => isfirstletter ? "na" : "n",
  "ꯟ": (isfirstletter) => "n",
  "ꯉ": (isfirstletter) => "ng",
  "ꯪ": (isfirstletter) => "ng",
  "ꯡ": (isfirstletter) => "ng",
  "ꯑꯣ": (isfirstletter) => "o",
  "ꯣ": (isfirstletter) => "o",
  "ꯎ": (isfirstletter) => "u",
  "ꯨ": (isfirstletter) => "u",
  "ꯑꯧ": (isfirstletter) => "ou",
  "ꯧ": (isfirstletter) => "ao",
  "ꯄ": (isfirstletter) => isfirstletter ? "pa" : "p",
  "ꯞ": (isfirstletter) => "p",
  "ꯔ": (isfirstletter) => isfirstletter ? "ra" : "r",
  "ꯁ": (isfirstletter) => isfirstletter ? "sa" : "s",
  "ꯇ": (isfirstletter) => isfirstletter ? "ta" : "t",
  "ꯠ": (isfirstletter) => "t",
  "ꯊ": (isfirstletter) => "th",
  "ꯋ": (isfirstletter) => isfirstletter ? "wa" : "w",
  "ꯌ": (isfirstletter) => "y",
  "꯫": (isfirstletter) => ".",
  "ꯀ꯭ꯋ": (isfirstletter) => "q",
  "ꯀ꯭ꯁ": (isfirstletter) => "x",
};
